-1. What is Java and types of data type ?
  1. Java is a high level,object-oriented programming language that was developed by James Gosling at 1995.
  2. It is platform-independent, meaning that programs written can run on any platform that has a Java Virtual Machine(JVM) installed.
  3. There are two tpes of data types defined in the java - 
    i. primitive - This type of data is predefined by Java. We just use them to provide the data type for the input. These data types are defined as below - 
      - byte
      - short
      - int
      - long
      - float
      - double
      - char
      - boolean
    ii. non-primitive - This type of data type can be customized by the user. These are as below -
      - String
      - array

2. Why is Java not a pure Object-Oriented Programming Language ?
  Java supports primitive data types - byte, short, int, long, float, double, char, boolean.

3. What is Instance and Local Variable ?
  Instance Variable - Instance variables are those variables that are accessible by all the methods in the class. They are declared outside the methods and inside the class. These variables describe the properties of an object and remain bound to it at any cost.
Example -
class Athlete {
  public string athleteName;
  public double athletespeed;
  public int athleteage;
}

  Local Variable - Local variables are those variables present within a block, function, or constructor and can be accessed only inside them. Whenever a local Variable is declared inside a method, the other class methods don't have any knowledge about the local Variable.
Example - 
public void athlete() {
  String athleteName;
  double athletespeed;
  int athleteage;
}

Instance vs Local Variables
class Athlete {
  public String athleteName;
  public double athletespeed;
  public int athleteage;

  public Athlete(name,speed,age) {
    this.athleteName = name;
    this.athletespeed = speed;
    this.athleteage = age;
  }

  public void athleteRun() {
    int speed = 100;
    System.out.println("Athlete runs at" + speed + "km/hr");
  }
}

In class Athlete, athleteName, athletespeed, athleteage are instance variables.
name, speed, age and int speed = 100 are the local variables.

4. What do you mean by data encapsulation ?
  1. Data encapsulation is an object-oriented programming concept of hiding the data attributes and their behaviours in a single unit.
  2. It helps developers to follow modularity while developing software by ensuring that each object is independent of other objects by having its own methods, attributes, and functionalities.
  3. It is used for the security of the private properties of an object and hence serves the purposes of data hiding.
class {
  data members(properties)
      +
  methods(behaviour)
}

5. What are the difference between equals() and equality operator(==) ?
  Difference b/w equals() and equality operator(==)
equals()
1. This is a method defined in the object class.
2. This method is used for checking the equality of contents between two objects as per the specified business logic.
3. The equals() method is present in the object class, so we can override our custom equals() method in the custom class, for object comparison.

==(equality operator)
1. It is a binary operator in Java.
2. This operator is used for comparing addresses i.e., checks if both the objects are pointing to the same memory location.
3. It cannot be modified. They always compare the HashCode.

6. Why is Java a platform independent language ?
  Java language are developed so that it does not depend on any hardware or software because the compiler compiles the code and then converts it to platform-independent byte code which can be run on multiple systems.
The only condition to run that byte code is for the machine to have a runtime environment(JRE) installed in it.

7. What is Method ?
  1. Method is the part of the class where we put our logic.
  2. Method are having their own body.
  3. We cannot create methods inside a method.
  4. There are four types of methods defined - 
    i. parameterized
    ii. non-paremeterized
    iii. return type
    iv. non-return type

8. What are the features of Java ?
  Java has several features that make it a popular programming language. Some of these features are easy to learn, OOPs, Platform Independence, Robust, Portable and Secured.
1. Easy - Java is a language which is considered easy to learn.
2. OOPs - OOPs stands for Object-Oriented Programming Language. OOPs signifies that, in java, everything is considered an object.
3. Platform Independence - Java is not compiled into a platform-specific machine. Instead, it is compiled into platform independence bytecode. This code is interpreted by the virtual machine on which the platform runs.
4. Robust - Java is a strong programming language as it uses strong memory management. The concepts like Automatic Garbage Collection, Exception Handling, etc make it more robust.
5. Portable - Java supports read-once-write anywhere approach. We can execute the java program on every machine.
6. Secured - Java is secured because it doesn't use explicit pointers. Java also provides the concept of bytecode and exception handling which makes it more secured.

9. What is JVM ?
  JVM stands for Java Virtual Machine. It is an abstract machine that provides the runtime environment in which java programs are executed. The JVM interprets Java bytecode and translates it into machine-specific code.

10. What is the difference between JDK, JRE, JVM ?
  JDK - 
1. JDK stands for Java Development Kit.
2. It is a software development kit that includes tools for developing, compiling, and debugging Java programs.
  JRE - 
1. JRE stands for Java Runtime Environment.
2. It is a software environment that provides the necessary runtime libraries components for running java program.
  JVM - 
1. JVM stands for Java Virtual Machine.
2. It is a virtual machine that executes the Java bytecode.

11. What are the Memory Allocations available in Java ?
  Java has five significant types of memory allocations -
1. Class Memory - Class Area stores per-class structures such as the runtime constant pool, field, method data and the code for methods.
2. Heap Memory - It is the runtime data area in which the memory is allocated to the objects.
3. Stack Memory - Java Stack stores frames. It holds local variables and partial results, and plays a part in method invocation and return.
4. Program Counter-Memory - PC(Program Counter) register contains the address of the Java Virtual Machine instruction currently being executed.
5. Native Method Stack Memory - It contains all the native method used in the application.

12. What are the difference between Heap and Stack Memory in Java and how Java utilizes it.
  Stack memory is the portion of memory that was assigned to every individual program, and it is fixed.
  Heap Memory is the portion that was not allocated to the Java Program but it will be available for use by the Java Program when it is required, mostly during the runtime of the program.
Java Utilizes this memory as - 
When we write a Java Program then all the variables, methods, etc are stored in the stack memory.
And when we create any object in the Java Program then that object was created in the heap Memory. And it was referenced from the Stack Memory.
Example - 
class Main {
  public void
printarray(int[] array) {
    for(int i : array) 
      System.out.println(i);}
  public static void main(String[] args){
    int[] array = new int[10];
    printarray(array);
}}
Main and PrintArray is the method that will be available in the stack area and as well as the variables declared that will also be in the stack area.
And the object(Integer Array of Size 10) we have created, will be available in the Heap area because that space will be allocated to the program during runtime.

13. Can Java be said to be the Complete OOL ?
  It is not wrong if we claim that Java is the complete object oriented programming language because everything in Java is under the classes and we can access them by creating the objects.
But we can even say that Java is not a complete object oriented programming language because it has the support of primitive data types like byte,short,int etc.
Now for the question : Is java a completely OOPL ? we can say that - Java is not a pure object oriented programming language, because it has direct access to primitive data types and these primitive data types don't belong to the Integer classes.

14. What is JIT Compiler ?
  Just-In-Time Compiler - It is used to improve performance. JIT compiler part of the bytecode that has same functionality at the same time, and hence reduce the amount of time need for compilation. Hence the "compiler" refers to the translator for the instruction set of the Java Virtual Machine to the instruction set of the specific cpu.

15. What is the platform ?
  A Platform is the hardware or software environment in which a piece of software is executed. There are two types of platform, software based and hardware based platform. Java provides software based platform.

16. What are the difference between the Java Platform and other platforms ?
  1. Java is the software based platform whereas other platforms may be the hardware or software based platform.
  2. Java is executed on the top of other hardware platform whereas other platform can only have the hardware components.

17. What is ClassLoader ?
  Classloader is the subsystem of Java Virtual Machine(JVM) which is used for load class files. Whenever we run the Java Program, it is loaded first by the classloader. There are three built-in classloader -
1. BootStrap ClassLoader - This is the first classloader which is a superclass of the extension classloader. It loads the rt.jar file which contails all the class files of JSE like java.lang package classes etc.
2. Extension Classloader - This is the class classloader of the bootstrap classloader and parent classloader of the System Classloader.
3. System/Application Classloader - This is the child classloader of the extension classloader. It loads the class files from the classpath.

18. Is delete, next, main, exit or null keyword in Java ?
  No

19.
