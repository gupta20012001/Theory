1. What is meant by the term OOPs ?
  OOPs refers to Object-Oriented Programming. It is the programming paradigm that is defined using objects. Objects can be considered as real-world instances of entities like class, that have some characteristics and behaviours.

2. What is the need for OOPs ?
  There are many reasons why OOPs is mostly preferred, but the most important among them are -
1. OOPs helps users to understand the software easily, although they don't know the actual implementation.
2. With OOPs, the readability, understandability, and maintainability of the code increase multifold.
3. Even very big software can be easily written and managed easily using OOPs.

3. What are some major Object Oriented Programming languages ?
  The programming languages that use and follow the Object-Oriented Programming paradigm or OOPs, are known as Object-Oriented Programming Languages. Some of the major Object-Oriented Programming languages include -
1. Java
2. C++
3. JavaScript 
4. Python
5. PHP
and many more

4. What are some other programming paradigms other than OOPs ?
  Programming 

5. What is meant by Structured Programming ?
  Structured Programming refers to the method of programming which consists of a completely structured control flow. Here structure refers to a block, which contains a set of rules, and has a definitive control flow, such as (if/then/else), (while and for), block structures, and subroutines.
Nearly all programming paradigms include Structured programming, including the OOPs model.

6. What are the main features of OOPs ?
  OOPs or Object-Oriented Programming mainly comprises of the four features -
1. Inheritance
2. Data Encapsulation 
3. Polymorphism 
4. Data Abstraction

7. What are some advantages of using OOPs ?
  Advantages of OOPs are -
1. OOPs is very helpful in solving very complex level of problems.
2. Highly complex programs can be created, handled, and maintained easily using object-oriented programming.
3. OOPs, promote code reuse, thereby reducing redundancy.
4. OOPs also helps to hide the unnecessary details with the help of Data Abstraction.
5. OOPs, are based on a bottom-up approach, unlike the Structural programming paradigm, which uses a top-down approach.
6. Polymorphism offers a lot of flexibility in OOPs.