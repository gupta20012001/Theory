1. What is meant by the term OOPs ?
  OOPs refers to Object-Oriented Programming. It is the programming paradigm that is defined using objects. Objects can be considered as real-world instances of entities like class, that have some characteristics and behaviours.

2. What is the need for OOPs ?
  There are many reasons why OOPs is mostly preferred, but the most important among them are -
1. OOPs helps users to understand the software easily, although they don't know the actual implementation.
2. With OOPs, the readability, understandability, and maintainability of the code increase multifold.
3. Even very big software can be easily written and managed easily using OOPs.

3. What are some major Object Oriented Programming languages ?
  The programming languages that use and follow the Object-Oriented Programming paradigm or OOPs, are known as Object-Oriented Programming Languages. Some of the major Object-Oriented Programming languages include -
1. Java
2. C++
3. JavaScript 
4. Python
5. PHP
and many more

4. What are some other programming paradigms other than OOPs ?
  Programming 

5. What is meant by Structured Programming ?
  Structured Programming refers to the method of programming which consists of a completely structured control flow. Here structure refers to a block, which contains a set of rules, and has a definitive control flow, such as (if/then/else), (while and for), block structures, and subroutines.
Nearly all programming paradigms include Structured programming, including the OOPs model.

6. What are the main features of OOPs ?
  OOPs or Object-Oriented Programming mainly comprises of the four features -
1. Inheritance
2. Data Encapsulation 
3. Polymorphism 
4. Data Abstraction

7. What are some advantages of using OOPs ?
  Advantages of OOPs are -
1. OOPs is very helpful in solving very complex level of problems.
2. Highly complex programs can be created, handled, and maintained easily using object-oriented programming.
3. OOPs, promote code reuse, thereby reducing redundancy.
4. OOPs also helps to hide the unnecessary details with the help of Data Abstraction.
5. OOPs, are based on a bottom-up approach, unlike the Structural programming paradigm, which uses a top-down approach.
6. Polymorphism offers a lot of flexibility in OOPs.

8. Why is OOPs so popular ?
  OOPs programming paradigm is considered as a better style of programming. Not only it helps in writing a complex piece of code easily, but it also allows users to handle and maintain them easily as well. Not only that, the main pillar of OOPs - Data Abstraction, Encapsulation, Inheritance, and Polymorphism, makes it easy for programmers to solve complex scenarios. As a result of these, OOPs is so popular.

9. What is a class ?
  A class can be understood as a template or a blueprint, which contains some values, known as member data or member, and some set of rules, known as behaviour or functions. So when an object is created, it automatically takes the data and functions that are defined in the class.
Therefore the class is basically a template or blueprint for objects. Also one can create as many objects as they want based on a class.
For example, first, a car's template is created. Then multiple units of car are created based on that template.

10. What is an Object ?
  An object refers to the instance of the class, which contains the instance of the members and behaviours defined in the class template. In the real world, an object is an actual entity to which a user interacts, whereas class is just the blueprint for that object. So the objects consume space and have some characteristic behaviour.
For example, a specific car.

11. What is encapsulation ?
  One can visualize Encapsulation as the method of putting everything that is required to do the job, inside a capsule and presenting that capsule to the user. What it means is that by encapsulation, all the necessary data and methods are bind together and all the unnecessary details are hidden to the normal user. Encapsulation is the process of binding data members and methods of a program to do a specific job, without revealing unnecessary details.
Encapsulation can also be defined in two different ways :
1. Data Hiding : Encapsulation is the process of hiding unwanted information such as restricting access to any member of an object.
2. Data Binding : Encapsulation is the process of binding data members and methods together as a whole, as a class.

12. What is Polymorphism ?
  Polymorphism is composed of two words - "poly" which means "many" and "morph" which means "shapes". Therefore polymorphism refers to something that has many shapes.
In OOPs, Polymorphism refers to the process by which some code, data, method or object behaves differently under different circumstances. Compile time polymorphism and Run time polymorphism are the two types of polymorphisms in OOPs languages.

13. What is Compile Time Polymorphism ? How is different from Run Time Polymorphism ?
  Compile-Time Polymorphism - Compile-Time Polymorphism, also known as Static Polymorphism refers to the type of polymorphism that happens at the compile time. What it means is that compiler decide what shape or value has to be taken by the entity.

  Run-Time Polymorphism - Run-Time Polymorphism, also known as Dynamic Polymorphism refers to the type of polymorphism that happens at the run time. What it means is it can't be decided by the compiler. Therefore, what shape or value has to be taken depends upon the execution. Hence the name Runtime Polymorphism.
Example -
class Anyvehicle {
  public void move() {
  System.out.println("Any vehicle should move!!");
  }
}
class Bike extends Anyvehicle {
  public void move() {
  System.out.println("Bike can move too!!");
  }
}
class Test {
  public static void main(String[] args) {
  Anyvehicle vehicle = new Bike();
  vehicle = new Anyvehicle();
  vehicle.move();
  }
}

